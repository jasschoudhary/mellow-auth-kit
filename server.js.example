
/**
 * This is an example server.js file showing how to implement the backend functionality.
 * Note: This is NOT part of the React application but serves as documentation
 * for how you would implement the server side.
 */

const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');
const { v4: uuidv4 } = require('uuid');
const fs = require('fs');
const path = require('path');
const helmet = require('helmet');

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(helmet()); // Security headers
app.use(cors());
app.use(bodyParser.json());

// Set up JWT secret
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

// Path to users file (for persistent storage)
const USERS_FILE = path.join(__dirname, 'users.json');

// In-memory user store (for development)
let users = [];

// Load users from file if it exists
try {
  if (fs.existsSync(USERS_FILE)) {
    const data = fs.readFileSync(USERS_FILE, 'utf8');
    users = JSON.parse(data);
    console.log('Users loaded from file');
  }
} catch (err) {
  console.error('Error reading users file:', err);
}

// Save users to file
const saveUsers = () => {
  try {
    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));
    console.log('Users saved to file');
  } catch (err) {
    console.error('Error writing users file:', err);
  }
};

// Configure nodemailer
const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST || 'smtp.mailtrap.io', // Use Mailtrap for testing
  port: process.env.SMTP_PORT || 2525,
  auth: {
    user: process.env.SMTP_USER || 'your-mailtrap-user',
    pass: process.env.SMTP_PASS || 'your-mailtrap-password',
  },
});

// Test email setup
transporter.verify()
  .then(() => console.log('SMTP connection verified'))
  .catch(err => console.error('SMTP verification failed:', err));

// Signup endpoint
app.post('/api/signup', async (req, res) => {
  try {
    const { name, email, password } = req.body;
    
    // Validate input
    if (!name || !email || !password) {
      return res.status(400).json({ error: 'All fields are required' });
    }
    
    // Check if user already exists
    if (users.some(user => user.email === email)) {
      return res.status(409).json({ error: 'User already exists' });
    }
    
    // Hash password
    const saltRounds = 10;
    const passwordHash = await bcrypt.hash(password, saltRounds);
    
    // Create new user
    const newUser = {
      id: uuidv4(),
      name,
      email,
      passwordHash,
      createdAt: new Date(),
    };
    
    // Add to users array
    users.push(newUser);
    
    // Save to file
    saveUsers();
    
    // Return success
    res.status(201).json({ message: 'User created successfully' });
  } catch (error) {
    console.error('Signup error:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

// Login endpoint
app.post('/api/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    
    // Find user
    const user = users.find(u => u.email === email);
    
    // Check if user exists
    if (!user) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }
    
    // Compare password
    const isPasswordValid = await bcrypt.compare(password, user.passwordHash);
    
    if (!isPasswordValid) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }
    
    // Generate JWT
    const token = jwt.sign(
      { userId: user.id, email: user.email },
      JWT_SECRET,
      { expiresIn: '1h' }
    );
    
    // Return token
    res.json({ token, user: { id: user.id, name: user.name, email: user.email } });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

// Forgot password endpoint
app.post('/api/forgot-password', async (req, res) => {
  try {
    const { email } = req.body;
    
    // Find user
    const user = users.find(u => u.email === email);
    
    // Even if user doesn't exist, don't reveal that for security
    if (!user) {
      return res.json({ message: 'Reset email sent' });
    }
    
    // Generate reset token
    const resetToken = uuidv4();
    const resetTokenExpiry = new Date();
    resetTokenExpiry.setHours(resetTokenExpiry.getHours() + 1); // Token valid for 1 hour
    
    // Update user with reset token
    user.resetToken = resetToken;
    user.resetTokenExpiry = resetTokenExpiry;
    
    // Save users
    saveUsers();
    
    // Create reset URL
    const resetUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/reset-password?token=${resetToken}`;
    
    // Send email
    const mailOptions = {
      from: process.env.EMAIL_FROM || 'auth@example.com',
      to: email,
      subject: 'Password Reset Request',
      html: `
        <h1>Password Reset</h1>
        <p>You requested a password reset. Click the link below to reset your password:</p>
        <a href="${resetUrl}">Reset Password</a>
        <p>This link will expire in 1 hour.</p>
        <p>If you didn't request this, please ignore this email.</p>
      `,
    };
    
    await transporter.sendMail(mailOptions);
    console.log(`Email sent to: ${email}`);
    
    res.json({ message: 'Reset email sent' });
  } catch (error) {
    console.error('Forgot password error:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

// Reset password endpoint
app.post('/api/reset-password', async (req, res) => {
  try {
    const { token, password } = req.body;
    
    // Validate input
    if (!token || !password) {
      return res.status(400).json({ error: 'Token and password are required' });
    }
    
    // Find user with token
    const user = users.find(u => 
      u.resetToken === token && 
      u.resetTokenExpiry && 
      new Date(u.resetTokenExpiry) > new Date()
    );
    
    // Check if token is valid
    if (!user) {
      return res.status(400).json({ error: 'Invalid or expired token' });
    }
    
    // Hash new password
    const saltRounds = 10;
    const passwordHash = await bcrypt.hash(password, saltRounds);
    
    // Update user
    user.passwordHash = passwordHash;
    user.resetToken = undefined;
    user.resetTokenExpiry = undefined;
    
    // Save users
    saveUsers();
    
    res.json({ message: 'Password reset successful' });
  } catch (error) {
    console.error('Reset password error:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

// Google OAuth endpoints
app.get('/auth/google', (req, res) => {
  const googleAuthUrl = 'https://accounts.google.com/o/oauth2/v2/auth';
  const params = new URLSearchParams({
    client_id: process.env.GOOGLE_CLIENT_ID,
    redirect_uri: `${process.env.BASE_URL || 'http://localhost:5000'}/auth/google/callback`,
    response_type: 'code',
    scope: 'profile email',
    access_type: 'offline',
  });
  
  res.redirect(`${googleAuthUrl}?${params.toString()}`);
});

app.get('/auth/google/callback', async (req, res) => {
  try {
    const { code } = req.query;
    
    // Exchange code for tokens
    const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        code,
        client_id: process.env.GOOGLE_CLIENT_ID,
        client_secret: process.env.GOOGLE_CLIENT_SECRET,
        redirect_uri: `${process.env.BASE_URL || 'http://localhost:5000'}/auth/google/callback`,
        grant_type: 'authorization_code',
      }),
    });
    
    const tokens = await tokenResponse.json();
    
    // Get user info
    const userInfoResponse = await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {
      headers: {
        Authorization: `Bearer ${tokens.access_token}`,
      },
    });
    
    const userInfo = await userInfoResponse.json();
    
    // Find or create user
    let user = users.find(u => u.email === userInfo.email);
    
    if (!user) {
      // Create new user
      user = {
        id: uuidv4(),
        name: userInfo.name,
        email: userInfo.email,
        googleId: userInfo.id,
        createdAt: new Date(),
      };
      
      users.push(user);
      saveUsers();
    }
    
    // Generate JWT
    const token = jwt.sign(
      { userId: user.id, email: user.email },
      JWT_SECRET,
      { expiresIn: '1h' }
    );
    
    // Redirect to frontend with token
    res.redirect(`${process.env.FRONTEND_URL || 'http://localhost:3000'}/login-success?token=${token}`);
  } catch (error) {
    console.error('Google auth error:', error);
    res.redirect(`${process.env.FRONTEND_URL || 'http://localhost:3000'}/login-error`);
  }
});

// Serve static files from public folder (for development)
app.use(express.static('public'));

// Start server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

/** 
 * INSTRUCTIONS FOR USING THIS SERVER:
 * 
 * 1. Install dependencies:
 *    npm install express body-parser cors bcrypt jsonwebtoken nodemailer uuid helmet
 * 
 * 2. Create a .env file with the following variables:
 *    PORT=5000
 *    JWT_SECRET=your-secret-key
 *    SMTP_HOST=smtp.mailtrap.io
 *    SMTP_PORT=2525
 *    SMTP_USER=your-mailtrap-user
 *    SMTP_PASS=your-mailtrap-password
 *    EMAIL_FROM=auth@example.com
 *    FRONTEND_URL=http://localhost:3000
 *    GOOGLE_CLIENT_ID=your-google-client-id
 *    GOOGLE_CLIENT_SECRET=your-google-client-secret
 *    BASE_URL=http://localhost:5000
 * 
 * 3. Run the server:
 *    node server.js
 * 
 * 4. Test email delivery:
 *    - Create a free Mailtrap account (https://mailtrap.io/)
 *    - Use the provided SMTP credentials in your .env file
 *    - All emails will be captured in your Mailtrap inbox
 *    - For production, replace with your real SMTP service
 * 
 * 5. Set up Google OAuth:
 *    - Go to Google Cloud Console (https://console.cloud.google.com/)
 *    - Create a new project
 *    - Go to APIs & Services > Credentials
 *    - Create OAuth 2.0 Client IDs
 *    - Add authorized redirect URI: http://localhost:5000/auth/google/callback
 *    - Use the client ID and secret in your .env file
 * 
 * 6. Connecting to a real database:
 *    - Replace the file-based storage with a database connection
 *    - MongoDB example:
 *      const mongoose = require('mongoose');
 *      mongoose.connect(process.env.MONGODB_URI);
 *      const User = mongoose.model('User', userSchema);
 *      // Then replace the users array operations with User.find(), User.create(), etc.
 *    - MySQL example:
 *      const mysql = require('mysql2/promise');
 *      const pool = mysql.createPool({
 *        host: process.env.DB_HOST,
 *        user: process.env.DB_USER,
 *        password: process.env.DB_PASSWORD,
 *        database: process.env.DB_NAME
 *      });
 *      // Then replace the users array operations with SQL queries
 */
